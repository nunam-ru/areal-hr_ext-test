services:
  db:
    image: postgres:latest  
    container_name: postgres_container
    env_file: 
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - HR-manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  nginx:
    image: nginx:stable-perl
    ports:
      - "80:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - db
      - api
      - app
    networks:
      - HR-manager
  api:
    container_name: api
    build: 
      context: .
      dockerfile: containers/api/Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL}
        API_PORT: ${API_PORT}
        APP_URL: ${APP_URL}
        SESSION_SECRET: ${SESSION_SECRET}
    env_file: 
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      API_PORT: ${API_PORT}
      APP_URL: ${APP_URL}
      SESSION_SECRET: ${SESSION_SECRET}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      db:
        condition: service_healthy
        restart: true
    networks:
      - HR-manager
  app:
    container_name: app
    build: 
      context: .
      dockerfile: containers/app/Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    env_file: 
      - .env
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      db:
        condition: service_healthy
        restart: true
    networks:
      - HR-manager

volumes:
  postgres_data:

networks:
  HR-manager:
    driver: bridge